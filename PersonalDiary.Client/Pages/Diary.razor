@page "/diary"
@using PersonalDiary.HttpRepositories.Contracts
@using PersonalDiary.Business.Models
@using Microsoft.AspNetCore.Components
@using PersonalDiary.Client.Shared.Dialogs

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudGrid>
        <MudItem xs="12" Class="mt-4">
            <MudPaper Class="pa-4">
                <MudText Typo="Typo.h4" Class="mb-4">My Diary</MudText>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.Add"
                           OnClick="OpenAddDialog">
                    Add New Entry
                </MudButton>
                <MudGrid Class="mt-4">
                    <!-- Search Field -->
                    <MudItem xs="12" sm="4" Class="mt-4">
                        <MudTextField Value="@searchString"
                                      ValueChanged="@(async (string value) => { searchString = value; await InvokeAsync(FilterAndSortEntries); })"
                                      Placeholder="Search entries..."
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.Search"
                                      IconSize="Size.Medium"
                                      Immediate="true" />
                    </MudItem>

                    <!-- Date Range Picker -->
                    <MudItem xs="12" sm="4" Class="mt-4">
                        <MudDateRangePicker DateRange="@dateRange"
                                            DateRangeChanged="@(async (DateRange range) => { dateRange = range; await InvokeAsync(FilterAndSortEntries); })"
                                            Clearable="true"
                                            PlaceholderStart="Start date"
                                            PlaceholderEnd="End date"
                                            Margin="Margin.Dense" />
                    </MudItem>

                    <!-- Sort By Dropdown -->
                    <MudItem xs="12" sm="4">
                        <MudSelect T="string"
                                   Value="@sortBy"
                                   ValueChanged="@(async (string value) => { sortBy = value; await InvokeAsync(FilterAndSortEntries); })"
                                   Label="Sort By"
                                   Class="mt-0"
                                   Immediate="true">
                            <MudSelectItem Value="@("date")">Date</MudSelectItem>
                            <MudSelectItem Value="@("title")">Title</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" Class="mt-4">
            @if (diaryEntries == null)
            {
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            }
            else if (!filteredEntries.Any())
            {
                <MudText>No diary entries found.</MudText>
            }
            else
            {
                <MudGrid>
                    @foreach (var entry in this.filteredEntries)
                    {
                        <MudItem xs="12" sm="6" md="4">
                            <MudCard Class="mud-card-clickable" @onclick="@(() => OpenViewDialog(entry))">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.h6">@entry.Title</MudText>
                                        <MudText Typo="Typo.body2">@entry.CreationDate.ToShortDateString()</MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardActions>
                                    <MudButton Variant="Variant.Text" 
                                             Color="Color.Primary"
                                             OnClick:stopPropagation="true"
                                             OnClick="@(() => OpenEditDialog(entry))">
                                        Edit
                                    </MudButton>
                                    <MudButton Variant="Variant.Text" 
                                             Color="Color.Error"
                                             OnClick:stopPropagation="true"
                                             OnClick="@(() => DeleteEntry(entry.ID))">
                                        Delete
                                    </MudButton>
                                </MudCardActions>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            }
        </MudItem>
    </MudGrid>
</MudContainer>

